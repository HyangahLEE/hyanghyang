package days13;

/**
 * @author kenik
 * @date 2018. 5. 16. - 오전 7:19:25
 * @subject 
 */

public class Ex01 {
	 
	
	public static void main(String[] args) {
		// p 171 열거 타입 ( enum ) 
		// 1. 객체 지향 프로그래밍 (  [O]bject [O]riented [P]rogramming )
		//                                 OOP 
		//    Object + Object + Object + ....  
		// 2. 클래스  = 객체(Object)를 만들기 위한 설계도
		// 3. 시작 객체(개체) class
		// 4. 클래스 선언 형식
		//     [접] [기] class 클래스명 
		//                              [extends  Super클래스 ] 
		//                              [implements 인터페이스...]{
		//     }
		
		// 5. 클래스 설계하는 과정(단계)
		//    예) 신형차 설계, 강아지집(객체,Object)   가로/세로/높이/색/재료
		//    ㄱ. 요구 , 분석 *** 
		//    ㄴ. 구성요소(  속성(특징) + 기능 ) -> 목록 작성
		//    ㄷ. 클래스 선언(설계)
		//    ㄹ. 테스트 - 샘플 객체
		//    ㅁ. 문제점 - 유지, 보수
		//    ㅂ. 상용화
		
		// 6. 클래스의 구성요소( 멤버 ) 
		//    ㄱ. 속성(특징) - 멤버변수 == 필드    ( fields)
		//    ㄴ. 기능         -  멤버함수 == 메서드 ( methods )
		
		// 7. 클래스 앞에 붙이는 접근지정자( access modifers )
		//   ㄱ. public 
		//        패키지 내,외 어디서든 상속, 참조 가능함.
		//   ㄴ. package == X  ==  default
		//        패키지 내에서만 상속, 참조 가능함.
		
		//   [비활성화]
		//   ㄷ. private    : 중첩 클래스 선언 때만 사용 가능
		//                      같은 파일 내에서만 상속, 참조 가능
		//   ㄹ. protected : 중첩 클래스 선언 때만 사용 가능
		//                      패키지 내부에서만 상속,참조 가능
		//                      + 패키지 외부에서는 상속만 가능
		
		// 8. 클래스 앞에 붙이는 기타제어자
		//    ㄱ. abstract  : 추상클래스로 선언
		//    ㄴ. final       : 최종클래스로 선언
		//    ㄷ. static      : 스태틱(정적)클래스로 선언
		
		// 변수 선언
		// 자료형 변수명[=초기값];
		//int age ;  // 식별자, 변수명
		
		// 배열 선언
		//int [] m; // 식별자, 변수명, 참조변수, 배열명
		
		// 클래스 ? 객체의 설계도
		// 객체 ? 클래스를 자료형으로 선언한 참조변수
		// 인스턴스 ? 
		// 클래스 선언
		Car myCar; // 식별자, 변수, 참조변수, 객체
		
		// Ex01 , Car 같은 패키지 안에 있는 클래스들이다.
		System.out.println("=END=");

	} // main

}
